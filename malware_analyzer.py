import hashlib
import sys
import os
import re

try:
    import magic  # python-magic library
except ImportError:
    magic = None

def calculate_hashes(file_path):
    hashes = {
        'md5': hashlib.md5(),
        'sha1': hashlib.sha1(),
        'sha256': hashlib.sha256()
    }
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            for h in hashes.values():
                h.update(chunk)
    return {name: h.hexdigest() for name, h in hashes.items()}

def get_file_type(file_path):
    if magic:
        ms = magic.Magic()
        return ms.from_file(file_path)
    else:
        # Fallback: use `file` command if on Linux/Unix
        try:
            import subprocess
            result = subprocess.run(['file', file_path], capture_output=True, text=True)
            return result.stdout.strip()
        except Exception:
            return "Unknown (python-magic not installed and 'file' command failed)"

def is_executable(file_type):
    exec_keywords = ['executable', 'PE32', 'Mach-O', 'ELF', 'script', 'shell script', 'python', 'perl', 'ruby']
    return any(keyword.lower() in file_type.lower() for keyword in exec_keywords)

def extract_suspicious_strings(file_path):
    suspicious_words = ['password', 'passwd', 'secret', 'cmd', 'shell', 'exec', 'http', 'https', 'eval', 'base64', 'token']
    found_strings = set()

    with open(file_path, errors='ignore') as f:
        content = f.read()

    # finds contain suspicious keywords
    for word in suspicious_words:
        pattern = re.compile(r'\b\w*' + re.escape(word) + r'\w*\b', re.IGNORECASE)
        matches = pattern.findall(content)
        for match in matches:
            found_strings.add(match)
    
    return found_strings

def main():
    if len(sys.argv) != 2:
        print(f"Usage: python {os.path.basename(__file__)} <file_to_analyze>")
        sys.exit(1)

    file_path = sys.argv[1]

    if not os.path.isfile(file_path):
        print(f"File not found: {file_path}")
        sys.exit(1)

    print(f"Analyzing file: {file_path}\n")

    hashes = calculate_hashes(file_path)
    print("Hashes:")
    for h, val in hashes.items():
        print(f"  {h.upper()}: {val}")

    file_type = get_file_type(file_path)
    print(f"\nFile type: {file_type}")

    exec_check = is_executable(file_type)
    print(f"Is executable/script: {'Yes' if exec_check else 'No'}")

    suspicious = extract_suspicious_strings(file_path)
    if suspicious:
        print("\nSuspicious strings found:")
        for s in sorted(suspicious):
            print(f"  - {s}")
    else:
        print("\nNo suspicious strings found.")

if __name__ == "__main__":
    main()
